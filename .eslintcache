[{"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\index.js":"1","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\App.js":"2","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\reportWebVitals.js":"3","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\MenuComponent.js":"4","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\dishes.js":"5","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\DishDetailComponent.js":"6","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\MainComponent.js":"7","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\HeaderComponent.js":"8","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\FooterComponent.js":"9","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\HomeComponent.js":"10","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\ContactComponent.js":"11","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\promotions.js":"12","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\comments.js":"13","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\AboutComponent.js":"14","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\ConfigureStore.js":"15","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\ContactComponent_old.js":"16","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\dishes.js":"17","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\comments.js":"18","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\promotions.js":"19","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\leaders.js":"20","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\leaders.js":"21","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\ActionTypes.js":"22","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\ActionCreators.js":"23","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\LoadingComponent.js":"24","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\forms.js":"25","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\baseUrl.js":"26"},{"size":639,"mtime":1611920648716,"results":"27","hashOfConfig":"28"},{"size":549,"mtime":1612005554521,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":2164,"mtime":1612178669971,"results":"31","hashOfConfig":"28"},{"size":1598,"mtime":1611922474667,"results":"32","hashOfConfig":"28"},{"size":7699,"mtime":1612179001769,"results":"33","hashOfConfig":"28"},{"size":3633,"mtime":1612179296176,"results":"34","hashOfConfig":"28"},{"size":5113,"mtime":1611930932154,"results":"35","hashOfConfig":"28"},{"size":2826,"mtime":1611921605325,"results":"36","hashOfConfig":"28"},{"size":1599,"mtime":1612178854883,"results":"37","hashOfConfig":"28"},{"size":11293,"mtime":1612098090640,"results":"38","hashOfConfig":"28"},{"size":457,"mtime":1611922546764,"results":"39","hashOfConfig":"28"},{"size":4926,"mtime":1611922570641,"results":"40","hashOfConfig":"28"},{"size":4346,"mtime":1611927625231,"results":"41","hashOfConfig":"28"},{"size":792,"mtime":1612097973955,"results":"42","hashOfConfig":"28"},{"size":11354,"mtime":1611930053066,"results":"43","hashOfConfig":"28"},{"size":598,"mtime":1612096281948,"results":"44","hashOfConfig":"28"},{"size":688,"mtime":1612179593179,"results":"45","hashOfConfig":"28"},{"size":615,"mtime":1612178578342,"results":"46","hashOfConfig":"28"},{"size":185,"mtime":1612093588250,"results":"47","hashOfConfig":"28"},{"size":2431,"mtime":1611922561582,"results":"48","hashOfConfig":"28"},{"size":410,"mtime":1612179426023,"results":"49","hashOfConfig":"28"},{"size":1821,"mtime":1612179819398,"results":"50","hashOfConfig":"28"},{"size":256,"mtime":1612096281963,"results":"51","hashOfConfig":"28"},{"size":165,"mtime":1612097943920,"results":"52","hashOfConfig":"28"},{"size":49,"mtime":1612179914130,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1gsurng",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\index.js",[],["112","113"],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\App.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\reportWebVitals.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\MenuComponent.js",["114"],"import React, {Component} from 'react';\r\nimport { Card, CardImg, CardImgOverlay,\r\n    CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nfunction RenderMenuItem ({dish}) {\r\n    return (\r\n        <Card>\r\n            <Link to={`/menu/${dish.id}`} >\r\n                <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst Menu = (props) => {\r\n\r\n    const menu = props.dishes.dishes.map((dish) =>{\r\n\r\n        if (props.dishes.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dishes.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h4>{props.dishes.errMess}</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\" key={dish.id}>\r\n                <RenderMenuItem dish={dish} onClick={props.onClick}/>\r\n            </div>\r\n        );\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Menu</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                {menu}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nexport default Menu;","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\dishes.js",[],["115","116"],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\DishDetailComponent.js",["117","118","119"],"import React, {Component} from 'react';\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n\r\n    Label,\r\n\r\n    Button,\r\n\r\n    Row, Col\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport {Control, Errors, LocalForm} from \"react-redux-form\";\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nclass CommentForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            isModalOpen: false\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        this.props.addComment(this.props.dishID, values.rating, values.author, values.comment);\r\n        this.toggleModal();\r\n        // event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-12 col-md-5\">\r\n\r\n                <Button outline onClick={this.toggleModal}><span className=\"fa fa-pencil fa-lg\"></span> Submit comment</Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label className=\"ml-3\" htmlFor=\"rating\" sm={2}>Rating</Label>\r\n\r\n                                    <Control.select model=\".rating\" name=\"rating\"\r\n                                                    className=\"form-control m-3\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n\r\n                                    </Control.select>\r\n\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label className=\"ml-3\"  htmlFor=\"yourName\" >Your Name</Label>\r\n\r\n                                    <Control.text model=\".yourName\" id=\"yourName\" name=\"yourName\"\r\n                                                  placeholder=\"Your Name\"\r\n                                                  className=\"form-control m-3\"\r\n                                                  validators={{\r\n                                                      required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n\r\n                            </Row>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Label  className=\"ml-3\" htmlFor=\"comment\" >Comment</Label>\r\n\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                                      rows=\"6\"\r\n                                                      className=\"form-control m-3\" />\r\n\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                       submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst  RenderDish=(props)=> {\r\n\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.dish != null)\r\n        return(\r\n            <div className=\"col-12 col-md-5\">\r\n            <Card>\r\n                <CardImg top src={baseUrl + props.dish.image} alt={props.dish.name} />\r\n                <CardBody>\r\n                    <CardTitle>{props.dish.name}</CardTitle>\r\n                    <CardText>{props.dish.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n            </div>\r\n        );\r\n    else\r\n        return(\r\n            <div></div>\r\n        );\r\n}\r\n\r\nconst  RenderComments=(comments, addComment, dishId) =>{\r\n\r\n    if (comments != null) {\r\n        return(\r\n            <div className=\"\">\r\n                <div className=\"col-12 col-md\">\r\n                <h4>Comments </h4>\r\n\r\n                { comments.comments.map((cm) => {\r\n                    return (\r\n\r\n                        <ul key={cm.id} className=\"list-unstyled m-1\">\r\n                            <li className=\"mb-4\" >{cm.comment} </li>\r\n                            <li className=\"mb-\"  >--{cm.author} ,  {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(cm.date)))}</li>\r\n\r\n                        </ul>\r\n                    )\r\n                })}\r\n                </div>\r\n                <div>\r\n                    <CommentForm dishID={dishId} addComment={addComment} />\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n\r\n\r\n    }   else\r\n        return(\r\n            <div></div>\r\n        );\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst  DishDetails = (props)=>{\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n\r\n                    <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>{props.dish.name}</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n\r\n                    <RenderDish dish={props.dish} />\r\n\r\n                    <RenderComments comments={props.comments}\r\n                                    addComment={props.addComment}\r\n                                    dishId={props.dish.id}/>\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    }\r\nexport default DishDetails;","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\MainComponent.js",["120"],"import React, { Component } from 'react';\r\nimport Menu from './MenuComponent';\r\nimport Home from './HomeComponent';\r\nimport DishDetails from './DishDetailComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\r\nimport Contact from './ContactComponent';\r\nimport { connect } from 'react-redux';\r\nimport About from \"./AboutComponent\";\r\nimport { actions } from 'react-redux-form';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps= state => {\r\n    return {\r\n        dishes: state.dishes,\r\n        comments: state.comments,\r\n        promotions: state.promotions,\r\n        leaders: state.leaders\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n    fetchDishes: () => { dispatch(fetchDishes())},\r\n    resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\r\n    fetchComments: () => dispatch(fetchComments()),\r\n    fetchPromos: () => dispatch(fetchPromos())\r\n});\r\n\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchDishes();\r\n        this.props.fetchComments();\r\n        this.props.fetchPromos();\r\n    }\r\n\r\n  render() {\r\n      const DishWithId = ({match}) => {\r\n          return(\r\n              <DishDetails dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n                          isLoading={this.props.dishes.isLoading}\r\n                          errMess={this.props.dishes.errMess}\r\n                          comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n                          commentsErrMess={this.props.comments.errMess}\r\n                          addComment={this.props.addComment}\r\n              />\r\n          );\r\n      };\r\n      const HomePage = () => {\r\n          return(\r\n              <Home\r\n                  dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n                  dishesLoading={this.props.dishes.isLoading}\r\n                  dishErrMess={this.props.dishes.errMess}\r\n                  promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n                  promoLoading={this.props.promotions.isLoading}\r\n                  promoErrMess={this.props.promotions.errMess}\r\n                  leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n              />\r\n          );\r\n      }\r\n      const AboutPage= ()=> {\r\n          return (\r\n              <About\r\n                  leaders={this.props.leaders}\r\n                  leaderDetails={this.props.leaders.filter((leader) => leader.description)}\r\n              />\r\n          );\r\n\r\n      }\r\n    return (\r\n      <div>\r\n          <Header />\r\n          <Switch>\r\n              <Route path='/home' component={HomePage} />\r\n              <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />\r\n              <Route path='/menu/:dishId' component={DishWithId} />\r\n              <Route exact path='/contactus' component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />\r\n              <Route exact path='/aboutus' component={AboutPage} />} />\r\n              <Redirect to=\"/home\" />\r\n\r\n          </Switch>\r\n\r\n          <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\HeaderComponent.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\FooterComponent.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\HomeComponent.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\ContactComponent.js",["121","122","123","124","125","126","127","128","129"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem,\r\n    Button, Row, Col, Label } from 'reactstrap';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n        // event.preventDefault();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br/>\r\n                            Clear Water Bay, Kowloon<br/>\r\n                            HONG KONG<br/>\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br/>\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br/>\r\n                            <i className=\"fa fa-envelope\"></i>: <a\r\n                            href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i\r\n                                className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i\r\n                                className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                  placeholder=\"First Name\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                  placeholder=\"Last Name\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                                  placeholder=\"Tel. Number\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                                  placeholder=\"Email\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required, validEmail\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                              className=\"form-check-input\"\r\n                                            /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                                    className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                                      rows=\"12\"\r\n                                                      className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\promotions.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\comments.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\AboutComponent.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\ConfigureStore.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\ContactComponent_old.js",["130","131"],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\dishes.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\comments.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\promotions.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\leaders.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\leaders.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\ActionTypes.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\ActionCreators.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\components\\LoadingComponent.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\redux\\forms.js",[],"D:\\Coursera\\Front-End Web Development with React\\React\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":1,"column":16,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"132","replacedBy":"140"},{"ruleId":"134","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":65,"column":37,"nodeType":"144","endLine":66,"endColumn":82},{"ruleId":"142","severity":1,"message":"145","line":79,"column":37,"nodeType":"144","endLine":85,"endColumn":39},{"ruleId":"142","severity":1,"message":"146","line":102,"column":37,"nodeType":"144","endLine":104,"endColumn":86},{"ruleId":"147","severity":1,"message":"148","line":35,"column":3,"nodeType":"149","messageId":"150","endLine":38,"endColumn":4},{"ruleId":"136","severity":1,"message":"151","line":4,"column":33,"nodeType":"138","messageId":"139","endLine":4,"endColumn":40},{"ruleId":"152","severity":1,"message":"153","line":71,"column":29,"nodeType":"144","endLine":71,"endColumn":71},{"ruleId":"142","severity":1,"message":"145","line":88,"column":37,"nodeType":"144","endLine":94,"endColumn":39},{"ruleId":"142","severity":1,"message":"145","line":110,"column":37,"nodeType":"144","endLine":116,"endColumn":39},{"ruleId":"142","severity":1,"message":"145","line":132,"column":37,"nodeType":"144","endLine":138,"endColumn":39},{"ruleId":"142","severity":1,"message":"145","line":155,"column":37,"nodeType":"144","endLine":161,"endColumn":39},{"ruleId":"142","severity":1,"message":"154","line":177,"column":45,"nodeType":"144","endLine":179,"endColumn":47},{"ruleId":"142","severity":1,"message":"143","line":185,"column":37,"nodeType":"144","endLine":186,"endColumn":78},{"ruleId":"142","severity":1,"message":"146","line":195,"column":37,"nodeType":"144","endLine":197,"endColumn":82},{"ruleId":"136","severity":1,"message":"155","line":2,"column":82,"nodeType":"138","messageId":"139","endLine":2,"endColumn":85},{"ruleId":"152","severity":1,"message":"153","line":116,"column":29,"nodeType":"144","endLine":116,"endColumn":71},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar",["156"],["157"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","'Row' is defined but never used.","no-global-assign","no-unsafe-negation"]